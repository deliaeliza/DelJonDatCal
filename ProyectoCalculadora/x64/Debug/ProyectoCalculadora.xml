<?xml version="1.0"?>
<doc>
    <assembly>
        "ProyectoCalculadora"
    </assembly>
    <members>
        <member name="M:main">
            <summary>Ejecuta el programa</summary>
        </member>
        <member name="M:Calculadora.convertir(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>Convierte un string a un numero</summary>
            <remarks>Recibe un string que contiene un numero</remarks>
            <returns>Devuelve un double con el numero convertido</returns>
        </member>
        <member name="M:Calculadora.realizarOperacion(System.Double,System.Double,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>Realiza una operacion</summary>
            <remarks>Recibe dos numeros y un operador</remarks>
            <returns>Devuelve un double</returns>
        </member>
        <member name="M:Calculadora.esOperador(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>Verifica que un valor, es un operador o no</summary>
            <remarks>Recibe un string con un valor actual</remarks>
            <returns>Devuelve un bool con la verficacion</returns>
        </member>
        <member name="M:Calculadora.unificarSignos(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>Resuelve signos de + y -</summary>
            <remarks>Recibe el signo actual, y el anterior</remarks>
            <returns>Devuelve un string con el resultado de resolver los signos anteriores</returns>
        </member>
        <member name="M:Calculadora.resultado(Cola*,Pila&lt;System.Double&gt;)">
            <summary>Calcula el resultado de la expresion postfija</summary>
            <remarks>Recibe una cola, en la que esta la expresion postfija, y recibe una pila, en la que guardara 
los numeros de la expresion</remarks>
            <returns>Devuelve un double con el resultado</returns>
        </member>
        <member name="M:Calculadora.convertirString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
            <summary>Convierte un char a un string</summary>
            <remarks>Recibe un char</remarks>
            <returns>Devuelve un string</returns>
        </member>
        <member name="M:Calculadora.precedencia(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
            <summary>Consulta el operador de mayor importancia</summary>
            <remarks>Recibe un operador valido, ya sea +,-,^,*,/,(</remarks>
            <returns>Retorna un numero entero</returns>
        </member>
        <member name="M:Calculadora.convertirInterFijaPostFija(Pila&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;,Nodo*)">
            <summary>Metodo recursivo que convierte la expresion entrefija a una expresion postfija</summary>
            <remarks>Recibe una pila, y el primer elemento de la lista</remarks>
        </member>
        <member name="M:Calculadora.convertirExpresionPostFija(Lista*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Metodo que llama al metodo que convierte a expresion post-fija</summary>
            <remarks>Recibe una lista por referencia</remarks>
        </member>
        <member name="M:Calculadora.resultado(Lista*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Devuelve el resultado de evaluar la cadena postfija</summary>
            <remarks>Recibe una lista por referencia</remarks>
            <returns>Retorna un double con el resultado</returns>
        </member>
        <member name="M:Calculadora.getCadenaPostFija">
            <summary>Devuelve el string que contiene la cadena postfija</summary>
        </member>
        <member name="M:Calculadora.Dispose">
            <summary>Destructor de la clase</summary>
        </member>
        <member name="M:Calculadora.#ctor">
            <summary>Constructor de clase, Inicializa un string, y la cola</summary>
        </member>
        <member name="M:Control.obtenerPostFija">
            <summary>Metodo que devuelve la cadena que contiene la expresion post-fija</summary>
            <returns>Devuelve un string con la expresion post-fija</returns>
        </member>
        <member name="M:Control.obtenerResultado(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>Metodo que es llamado de la interfaz, en donde obtiene el resultado
en donde encapsula varios metodos</summary>
            <remarks>Recibe por parametro la expresion entre-fija</remarks>
            <returns>Devuelve el resultado final</returns>
        </member>
        <member name="M:Control.pasarExpresionLista(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,Lista*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Pasa la cadena que contiene la expresion entrefija a una lista</summary>
            <remarks>Llena una lista de caracteres</remarks>
        </member>
        <member name="M:Control.removerEspacios(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Remueve espacios de un string</summary>
            <remarks>Recibe la direccion de memoria de la expresion entre fija</remarks>
        </member>
        <member name="M:Control.esOperador(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
            <summary>Metodo que valida si un char es un operador</summary>
            <remarks>Recibe por parametro un char, con la expresion</remarks>
            <returns>Retorna true si es operador, false si no</returns>
        </member>
        <member name="M:Control.esValida(System.UInt32,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>Valida que la expresion entrefija digitada por el usuario es valida</summary>
            <remarks>Recbie una posicion, y la expresion entrefija a validar</remarks>
            <returns>Retorna un bool, true si la expresion en valida, false si no</returns>
        </member>
        <member name="M:Control.esValida(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>Valida que la expresion entrefija digitada por el usuario es valida,
Este metodo llama a otro metodo que valida la expresion, pero le pasa una posicion por parametro</summary>
            <remarks>Recibe por paramtro un string con la expresion</remarks>
            <returns>Retorna un bool</returns>
        </member>
        <member name="M:Control.Dispose">
            <summary>Destructor de la clase</summary>
        </member>
        <member name="M:Control.#ctor">
            <summary>Constructor de la clase </summary>
        </member>
        <member name="M:Interfaz.mostrarDatos">
            <summary>Metodo que muestra toda la interfaz al usuario, e interactua con el usuario</summary>
        </member>
        <member name="M:Interfaz.calcularExpresion">
            <summary>Muestra los resultados de calcular la expresion entre-fija</summary>
        </member>
        <member name="M:Interfaz.armarInicio">
            <summary>Muestra los caracteres validos en la consola</summary>
        </member>
        <member name="M:Interfaz.Dispose">
            <summary>Destructor de la clase</summary>
        </member>
        <member name="M:Interfaz.#ctor">
            <summary>Constructor de la clase</summary>
        </member>
        <member name="T:Interfaz">
            <summary>Declaracion de la clase interfaz, que tendra las salidas 
que necesita el usuario</summary>
        </member>
        <member name="T:Control">
            <summary>Clase control, que intermedia entre la clase calculadora y la clase interfaz
Ademas contiene metodos generales.</summary>
        </member>
        <member name="T:Calculadora">
            <summary>Clase Calculadora, Contiene los metodos de calcular y convertir
una expresion post-fija</summary>
        </member>
        <member name="T:Cola">
Declaración de la clase Cola
</member>
    </members>
</doc>